using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml;
using System.Text.RegularExpressions;
using System.Net;
using System.Diagnostics;
using OsmSharp.Osm.PBF.Streams;
using OsmSharp.Osm;

namespace HouseNumberValidator
{
    class Program
    {
        Reports reps = new Reports();

        string dirIn = @"D:\OSM\Data\Dump\";
        string dirOut = @"D:\OSM\Data\Dump\log\";
        string dirOutTemp = @"D:\OSM\Data\Dump\log\temp\";
        string dirOutMap = @"D:\OSM\Data\Dump\log\map\";
        FileInfo file;

        List<IValidator> validators;

        DateTime dateDump;

        public void Validate()
        {
            //DownloadFiles();
            ReadFiles();
            //SaveIndexReport();
            //SaveMapAll();

            //Console.WriteLine( nds.Count );
            Console.WriteLine( "End." );
            Console.ReadLine();
        }

        private string[] GetDownFiles()
        {
            int n;
            var r = reps.Reps;
            var minDate = r.Min( x => x.Stamp );
            int firsIndex = 0;

            for ( int i = 0; i < r.Count; i++ )
            {
                if ( r[ i ].Stamp > minDate )
                    continue;

                if ( i > 0 && r[ i - 1 ].Stamp == minDate )
                    continue;

                if ( r[ i ].Stamp == minDate )
                    firsIndex = i;
            }

            if ( firsIndex == 0 )
                n = 29;
            else
                n = 28;

            var res = r.Skip( firsIndex ).Take( n );
            var count = res.Count();

            if ( count < n )
                res = res.Concat( r.Take( n - count ) );

            var result = res.Select( x => x.Region ).ToArray();

            return result;
        }

        public void DownloadFiles( bool pbf = true )
        {
            string[] regions = GetDownFiles( 30 );
            //string[] regions = { /* "RU-TVE", "RU-RYA", "RU-SAM", "RU-AD", "RU-AL", "RU-ALT", "RU-AMU", */"RU-KYA" };

            string typefile = pbf ? ".osm.pbf" : ".osm.bz2";
            WebClient webClient = new WebClient();

            foreach ( string region in regions )
            {
                Console.Write( "Download {0}", region );
                webClient.DownloadFile( @"http://data.gis-lab.info/osm_dump/dump/latest/" + region + typefile,
                    dirIn + region + typefile + ".down" );
                File.Delete( dirIn + region + typefile );
                File.Move( dirIn + region + typefile + ".down", dirIn + region + typefile );

                file = new FileInfo( dirIn + region + typefile );
                dateDump = file.LastWriteTime;

                Console.CursorLeft = 0;
                Console.Write( "Validate {0}", region );

                Stopwatch stw = new Stopwatch();
                stw.Start();
                ReadPbfFile( file );
                stw.Stop();
                //Console.WriteLine( stw.Elapsed );

                WriteReports();
                UploadToFtp();
            }
        }

        public void ReadFiles( bool pbf = true )
        {
            string typefile = pbf ? ".osm.pbf" : ".osm.bz2";

            if ( !Directory.Exists( dirOut ) )
                Directory.CreateDirectory( dirOut );

            foreach ( string fl in Directory.GetFiles( dirIn, "*" + typefile ) )
            {
                file = new FileInfo( fl );
                string region = file.Name.Split( '.' )[ 0 ];
                DateTime stump = reps.GetRegion( region ).Stamp;
                /*
                if (stump.Day >= fileInfo.LastWriteTime.Day 
                    && stump.Month >= fileInfo.LastWriteTime.Month 
                    && stump.Year >= fileInfo.LastWriteTime.Year 
                    )
                    continue;
                */
                if ( region != "RU-TA" ) continue;
                //if ( reps.GetRegion( region ).Warnings == 0 ) continue;

                dateDump = file.LastWriteTime;

                Console.CursorLeft = 0;
                Console.Write( "Validate {0}", region );

                Stopwatch stw = new Stopwatch();
                stw.Start();
                ReadPbfFile( file );
                stw.Stop();
                Console.WriteLine( stw.Elapsed );

                WriteReports();
            }
        }

        private void WriteReports()
        {
            string region = file.Name.Split( '.' )[ 0 ];

            Console.CursorLeft = 0;
            Console.WriteLine( "{0}:\t{1,4} err, {2,3} flats, {3,4} strt, {4,5} names", region,
                validators.Find( x => x is ValidatorHouseNumb ).Errors.Count,
                validators.Find( x => x is ValidatorFlats ).Errors.Count,
                validators.Find( x => x is ValidatorNoStreet ).Errors.Count,
                validators.Find( x => x is ValidatorNames ).Errors.Count
                );

            reps.Edit( new RegionReport( region,
                validators.Find( x => x is ValidatorHouseNumb ).Errors.Count,
                validators.Find( x => x is ValidatorHouseNumb ).Errors.Count,
                validators.Find( x => x is ValidatorFlats ).Errors.Count,
                validators.Find( x => x is ValidatorNoStreet ).Errors.Count,
                validators.Find( x => x is ValidatorNames ).Errors.Count,
                validators.Find( x => x is ValidatorDoubleTag ).Errors.Count,
                dateDump
                ) );


            validators.ForEach( x => SaveReport( x, region, dirOut ) );
            validators.ForEach( x => SaveMapHtml( x, region, dirOutMap ) );

            SaveIndexReport();
        }

        public void ReadPbfFile( FileInfo pbfile )
        {
            validators = new List<IValidator>();
            validators.Add( new ValidatorHouseNumb() );
            validators.Add( new ValidatorFlats() );
            validators.Add( new ValidatorNoStreet() );
            validators.Add( new ValidatorNames() );
            validators.Add( new ValidatorDoubleTag() );
            GeoOperations.ClearCollections();

            using ( FileStream fileStream = pbfile.OpenRead() )
            {
                PBFOsmStreamSource reader = new PBFOsmStreamSource( fileStream );
                foreach ( var geo in reader )
                {
                    if ( geo.Id.HasValue )
                    {
                        validators.ForEach( x => x.ValidateObject( geo ) );
                        GeoOperations.Add( geo );
                    }
                }
            }

            validators.ForEach( x => x.ValidateEndReadFile() );
        }

        private void SaveReport( IValidator validator, string region, string directory )
        {
            if ( validator.Errors.Count == 0 ) return;

            using ( StreamWriter fw = new StreamWriter( validator.GetPath( directory, region ), false, Encoding.UTF8 ) )
            {
                string regionName = Regions.RegionsDict[ region ];

                fw.WriteLine( @"<html><head>" );
                fw.WriteLine( @"<title>{0}</title>", regionName );

                fw.WriteLine( @"<style type=""text/css"">" );
                fw.WriteLine( @"</style>" );
                fw.WriteLine( @"<link rel=""stylesheet"" href=""style/style.css"" />" );
                fw.WriteLine( @"</head>" );

                fw.WriteLine( @"<body>" );
                fw.WriteLine( @"<img id=josm width=1 height=1 border=0 style='display:none' />" );

                fw.WriteLine( @"<script><!--" );
                fw.WriteLine( @"function open_josm(x) { document.getElementById('josm').src='http://127.0.0.1:8111/load_object?objects='+x; }" );
                fw.WriteLine( @"--></script>" );

                string elements = "";
                bool zapytaya = false;
                foreach ( HouseNumb pl in validator.Errors )
                {
                    if ( zapytaya )
                        elements += ",";
                    else
                        zapytaya = true;
                    elements += pl.Type + pl.Osmid;
                }

                fw.WriteLine( @"<b>{1}</b> | Дата проверки: {0:d MMM yyyy} | Ошибок: {2}<br>",
                    dateDump,
                    regionName,
                    validator.Errors.Count
                    );

                if ( validator.Description != string.Empty )
                    fw.WriteLine( "<br>" + validator.Description + "<br>" );


                fw.WriteLine( @"<table>" );
                fw.Write( @"<tr>" );
                fw.Write( @"<td>" );
                fw.Write( @"<a href=""http://127.0.0.1:8111/load_object?objects=" );
                fw.Write( elements );
                fw.Write( @""" onClick=""open_josm('" );
                fw.Write( elements );
                fw.Write( @"');return false;""><img border=0 width=20 height=20 src=icon_josm_all.png></a>" );
                fw.Write( @"</td>" );
                foreach ( var header in validator.GetTableHead() )
                    fw.Write( @"<td><b>{0}</b></td>", header );


                int n = 0;
                foreach ( HouseNumb pl in validator.Errors )
                {
                    if ( n++ % 2 == 1 )
                        fw.Write( @"<tr>" );
                    else
                        fw.Write( @"<tr class=""clr"">" );
                    fw.Write( @"<td><a href=""http://127.0.0.1:8111/load_object?objects={0}{1}"" onClick=""open_josm('{0}{1}');return false;""><img src=icon_to_josm.png></a></td>", pl.Type, pl.Osmid );
                    fw.Write( @"<td><a href=""http://osm.org/{0}/{1}"">{2}</a></td>", pl.Type, pl.Osmid, pl.Hnumb );
                    fw.Write( @"<td>" + pl.Description + @"</td>" );
                    fw.Write( @"</tr>" );
                    fw.WriteLine();
                }
            }
        }

        public void SaveIndexReport()
        {
            string outFileName = "v.html";
            using ( StreamWriter fw = new StreamWriter( dirOut + outFileName, false, Encoding.UTF8 ) )
            {
                fw.WriteLine( @"<html><head>" );
                fw.WriteLine( @"<title>Валидатор номеров домов</title>" );
                fw.WriteLine( @"<style type=""text/css"">" );
                fw.WriteLine( @"TR.clr {background: #eeeeee}" );
                fw.WriteLine( @"TD {padding: 0px 7px}" );
                //fw.WriteLine( @"* { font-family:'Colibri'; }" );
                fw.WriteLine( @"</style></head>" );

                fw.WriteLine( @"<body>" );
                fw.WriteLine( @"<b>Валидатор номеров домов</b> | " );
                fw.WriteLine( @"<a href=""http://forum.openstreetmap.org/viewtopic.php?id=53343"">Форум</a>" );
                fw.Write( @" | " );
                fw.WriteLine( @"<a href=""http://wiki.openstreetmap.org/wiki/RU:Валидаторы"">Другие валидаторы</a>" );
                fw.Write( @"<br><br>" );
                fw.WriteLine( @"<table>" );
                fw.Write( @"<tr>" );
                fw.Write( @"<td><b>Регион</b></td>" );
                fw.Write( @"<td><b>Дата проверки</b></td>" );
                fw.Write( @"<td><b>Ошибки</b></td>" );
                fw.Write( @"<td><b>Пред-ия</b></td>" );
                fw.Write( @"<td><b>Квартиры</b></td>" );
                fw.Write( @"<td><b>Нет улицы</b></td>" );
                fw.Write( @"<td><b>Нет тега</b></td>" );
                fw.Write( @"<td><b>Дублирование школ</b></td>" );
                fw.Write( @"</tr>" );

                fw.WriteLine();
                int n = 0;

                string icon = @"<img border=0 width=16 height=16 src=icon_map.png alt='map' title='Показать на карте'>";

                foreach ( RegionReport rep in reps.Reps )
                {
                    if ( n++ % 2 == 1 )
                        fw.Write( @"<tr>" );
                    else
                        fw.Write( @"<tr class=""clr"">" );

                    fw.Write( @"<td>{0}</td>",
                        Regions.RegionsDict[ rep.Region ] );
                    fw.Write( @"<td>{0:dd-MMM-yyyy}</td>", rep.Stamp );

                    //--------------Ошибки--------------

                    if ( rep.Errors > 0 )
                        fw.Write( @"<td><a href=""{2}"">{3}</a> <a href=""{0}"">{1}</a>",
                            rep.Region + ".html",
                            rep.Errors > 0 ? rep.Errors.ToString() : "",
                            @"map/" + rep.Region + ".errors.map.html",
                            icon
                            );
                    if ( rep.Errors == 0 )
                        fw.Write( @"<td>{0}", "<font color=\"gold\">★</font>" );
                    fw.Write( @" <font color=""{1}"" size=""2.3"">{0}</font></td>",
                        //fw.Write( @" <sup>{0}</sup></td>",
                        rep.ErrorsOld >= 0 && rep.ErrorsOld != rep.Errors ? String.Format( "{0}", ( rep.Errors - rep.ErrorsOld ).ToString( "+#;−#;0" ) ) : "",
                        rep.Errors - rep.ErrorsOld > 0 ? "red" : rep.Errors - rep.ErrorsOld < 0 ? "green" : "black"
                        );

                    //--------------Пред-ния--------------

                    if ( rep.Warnings > 0 )
                        fw.Write( @"<td><a href=""{2}"">{3}</a> <a href=""{0}"">{1}</a>",
                            rep.Region + ".warning.html",
                            rep.Warnings > 0 ? rep.Warnings.ToString() : "",
                            @"map/" + rep.Region + ".warning.map.html",
                            icon
                            );
                    if ( rep.Warnings == 0 )
                        fw.Write( @"<td>{0}", "<font color=\"gold\">★</font>" );
                    fw.Write( @" <font color=""{1}"" size=""2.3"">{0}</font></td>",
                        //fw.Write( @" <sub>{0}</sub></td>",
                        rep.WarningsOld >= 0 && rep.WarningsOld != rep.Warnings ? String.Format( "{0}", ( rep.Warnings - rep.WarningsOld ).ToString( "+#;−#;0" ) ) : "",
                        rep.Warnings - rep.WarningsOld > 0 ? "red" : rep.Warnings - rep.WarningsOld < 0 ? "green" : "black"
                        );

                    //--------------Квартиры--------------

                    if ( rep.Flats > 0 )
                        fw.Write( @"<td><a href=""{0}"">{1}</a>",
                            rep.Region + ".flats.html",
                            rep.Flats > 0 ? rep.Flats.ToString() : ""
                            );
                    if ( rep.Flats == 0 )
                        fw.Write( @"<td>{0}", "<font color=\"gold\">★</font>" );
                    fw.Write( @" <font color=""{1}"" size=""2.3"">{0}</font></td>",
                        rep.FlatsOld >= 0 && rep.FlatsOld != rep.Flats ? String.Format( "{0}", ( rep.Flats - rep.FlatsOld ).ToString( "+#;−#;0" ) ) : "",
                        rep.Flats - rep.FlatsOld > 0 ? "red" : rep.Flats - rep.FlatsOld < 0 ? "green" : "black"
                        );

                    //--------------Нет улицы--------------

                    if ( rep.NoStreet > 0 )
                        fw.Write( @"<td><a href=""{2}"">{3}</a> <a href=""{0}"">{1}</a>",
                            rep.Region + ".nostreet.html",
                            rep.NoStreet > 0 ? rep.NoStreet.ToString() : "",
                            @"map/" + rep.Region + ".nostreet.map.html",
                            icon
                            );
                    if ( rep.NoStreet == 0 )
                        fw.Write( @"<td>{0}", "<font color=\"gold\">★</font>" );
                    fw.Write( @" <font color=""{1}"" size=""2.3"">{0}</font></td>",
                        rep.NoStreetOld >= 0 && rep.NoStreetOld != rep.NoStreet ? String.Format( "{0}", ( rep.NoStreet - rep.NoStreetOld ).ToString( "+#;−#;0" ) ) : "",
                        rep.NoStreet - rep.NoStreetOld > 0 ? "red" : rep.NoStreet - rep.NoStreetOld < 0 ? "green" : "black"
                        );

                    //--------------Нет тега--------------

                    if ( rep.Names > 0 )
                        fw.Write( @"<td><a href=""{2}"">{3}</a> <a href=""{0}"">{1}</a>",
                            rep.Region + ".names.html",
                            rep.Names > 0 ? rep.Names.ToString() : "",
                            @"map/" + rep.Region + ".names.map.html",
                            icon
                            );
                    if ( rep.Names == 0 )
                        fw.Write( @"<td>{0}", "<font color=\"gold\">★</font>" );
                    fw.Write( @" <font color=""{1}"" size=""2.3"">{0}</font></td>",
                        rep.NamesOld >= 0 && rep.NamesOld != rep.Names ? String.Format( "{0}", ( rep.Names - rep.NamesOld ).ToString( "+#;−#;0" ) ) : "",
                        rep.Names - rep.NamesOld > 0 ? "red" : rep.Names - rep.NamesOld < 0 ? "green" : "black"
                        );

                    //--------------Дублирование--------------

                    if ( rep.DoubleSchools > 0 )
                        fw.Write( @"<td><a href=""{2}"">{3} {1}</a>",
                            rep.Region + ".double.html",
                            rep.DoubleSchools,
                            @"map/" + rep.Region + ".double.map.html",
                            icon
                            );
                    if ( rep.DoubleSchools == 0 )
                        fw.Write( @"<td>{0}", "<font color=\"gold\">★</font>" );
                    fw.Write( @" <font color=""{1}"" size=""2.3"">{0}</font></td>",
                        rep.DoubleSchoolsOld >= 0 && rep.DoubleSchoolsOld != rep.DoubleSchools ? String.Format( "{0}", ( rep.DoubleSchools - rep.DoubleSchoolsOld ).ToString( "+#;−#;0" ) ) : "",
                        rep.DoubleSchools - rep.DoubleSchoolsOld > 0 ? "red" : rep.DoubleSchools - rep.DoubleSchoolsOld < 0 ? "green" : "black"
                        );

                    fw.Write( @"</tr>" );
                    fw.WriteLine();
                }

                fw.WriteLine( @"</table>" );
                fw.WriteLine( @"</body></html>" );
            }
        }

        public void SaveMapHtml( IValidator validator, string region, string directory )
        {
            if ( validator.Errors.Count == 0 ) return;

            string indexFile = validator.GetPath( directory, region );
            string indexBeinFile = @"D:\OSM\ValidatorTT\index_begin.html";
            string indexEndFile = @"D:\OSM\ValidatorTT\index_end.html";

            using ( StreamWriter wr = new StreamWriter( indexFile ) )
            {
                using ( StreamReader rd = new StreamReader( indexBeinFile ) )
                    wr.Write( rd.ReadToEnd() );

                wr.WriteLine( @"map.setView([{0}, {1}], 7);",
                    validator.Errors[ 0 ].lat.ToString().Replace( ',', '.' ),
                    validator.Errors[ 0 ].lon.ToString().Replace( ',', '.' ) );

                bool cluster = validator.Errors.Count > 100 ? true : false;
                bool nostreet = validator is ValidatorNoStreet;

                foreach ( var pl in validator.Errors )
                {
                    if ( pl.lat == 0 )
                        continue;

                    string popupText = String.Format(
                        @"<a href=\""http://127.0.0.1:8111/load_object?objects={0}{1}\"" onClick=\""open_josm('{0}{1}');return false;\""><img src=icon_to_josm.png></a> "
                        + @"<a href=\""http://osm.org/{0}/{1}\"">{2}</a><br>",
                        pl.Type,
                        pl.Osmid,
                        pl.Hnumb == "" ? "[osm]" : pl.Hnumb.Replace( "\\", "\\\\" ).Replace( "\"", "\\\"" )
                        );

                    string icon = "iErr";

                    if ( nostreet && pl.Description != string.Empty )
                    {
                        foreach ( var place in pl.Description.Split( '|' ) )
                            popupText += place.Replace( ":", " =" ).Replace( "\"", "\\\"" ).Trim();
                        icon = "iWarn";
                    }

                    wr.WriteLine( string.Format( @"L.marker([{0}, {1}],{{icon: {4}}}).addTo({2}).bindPopup(""{3}"");",
                        pl.lat.ToString().Replace( ',', '.' ),
                        pl.lon.ToString().Replace( ',', '.' ),
                        cluster ? "markerCluster" : "map",
                        popupText,
                        icon
                        ) );
                }

                using ( StreamReader rd = new StreamReader( indexEndFile ) )
                    wr.Write( rd.ReadToEnd() );
            }

        }

        private void SaveMapAll()
        {
            List<string> types = new List<string>{
                "errors",
                "warning",
                "nostreet",
                "names"
            };

            foreach ( var type in types )
            {
                string indexFile = dirOutMap + "RU." + type + ".map.html";
                string indexBeinFile = @"D:\OSM\ValidatorTT\index_begin.html";
                string indexEndFile = @"D:\OSM\ValidatorTT\index_end.html";
                List<string> errors = new List<string>();

                foreach ( var file in Directory.GetFiles( dirOutMap, "RU-*." + type + ".map.html" ) )
                {
                    using ( StreamReader sr = new StreamReader( file ) )
                    {
                        while ( !sr.EndOfStream )
                        {
                            string line = sr.ReadLine();
                            if ( line.StartsWith( "L.marker" ) )
                                errors.Add( line.Replace( "(map)", "(markerCluster)" ) );
                        }
                    }
                }
                errors = errors.Distinct().ToList();
                using ( StreamWriter wr = new StreamWriter( indexFile ) )
                {
                    using ( StreamReader rd = new StreamReader( indexBeinFile ) )
                        wr.Write( rd.ReadToEnd() );

                    wr.WriteLine( @"map.setView([61.0455502, 83.6036577], 4);" );

                    foreach ( var line in errors )
                        wr.WriteLine( line );

                    using ( StreamReader rd = new StreamReader( indexEndFile ) )
                        wr.Write( rd.ReadToEnd() );
                }
            }
        }

        private void UploadToFtp()
        {
            string region = file.Name.Split( '.' )[ 0 ];
            List<string> files = new List<string>{
                "v",
                "",
                "warning",
                "flats",
                "nostreet",
                "names",
                "errors.map",
                "warning.map",
                "nostreet.map",
                "names.map",
                "double.map"
            };


            foreach ( var fl in files )
            {
                string filename = region + "." + fl + ".html";
                if ( fl == "" )
                    filename = region + ".html";
                if ( fl == "v" )
                    filename = "v.html";
                if ( fl.EndsWith( "map" ) )
                    filename = @"map/" + region + "." + fl + ".html";

                FileStream fileStream;
                try { fileStream = File.OpenRead( dirOut + filename ); }
                catch ( FileNotFoundException ex ) { continue; }

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create( "ftp://m-tt.ru/http/hnumb/" + filename );
                request.Method = WebRequestMethods.Ftp.UploadFile;
                request.Credentials = new NetworkCredential( "w_m-tt-ru_b9f6e5d2", "fdf7eae9ciop" );
                Stream ftpStream = request.GetRequestStream();

                byte[] buffer = new byte[ 1024 ];
                int bytesRead = 0;
                do
                {
                    bytesRead = fileStream.Read( buffer, 0, 1024 );
                    ftpStream.Write( buffer, 0, bytesRead );
                }
                while ( bytesRead != 0 );
                fileStream.Close();
                ftpStream.Close();
            }
        }

        static void Main( string[] args )
        {
            Program p = new Program();
            p.Validate();
        }
    }
}
